
# Ascenso de colina simple

rm(list=ls())

#Array size
n=1000

mean_x=array(0,dim=n)
mean_y=array(0,dim=n)
distance=array(NaN,dim=n)
distance_target=array(NaN,dim=n)

##Position of the source of energy
target=matrix(NaN,ncol=2,nrow=5)
target[1,]=c(20,20)
target[2,]=c(-20,20)
target[3,]=c(-20,-20)
target[4,]=c(20,-20)
target[5,]=c(-20,20)

## exploration noise
noise=1.5

for (j in 1:length(target[,1])){
  
#Initial values
  if(j==1){
int_x=-25
int_y=-25
  }else{
dev.off()
int_x=target[j-1,1]
int_y=target[j-1,2] 
    
  }
 
plot(-20:20,-20:20, type="n",axes=F,xlab="",ylab="",xlim=c(-30,30),
       ylim=c(-30,30))   
if(j>=2){
  
x[x == 0] <- NA
y[y == 0] <- NA

points(x,y,pch=8)
}
mean_x[1]=int_x
mean_y[1]=int_y

x=array(0,dim=n)
y=array(0,dim=n)

x[1]=int_x
y[1]=int_y
distance[1]=sqrt((x[1]-target[j,1])^2 + (y[1]-target[j,2])^2)
distance_target[1]=distance[1]

points(target[j,1],target[j,2],pch=21,col="yellow",bg="yellow",cex=10)
points(target[j,1],target[j,2],pch=21,col="red",bg="red",cex=2)
mtext("Ascenso de colina simple",side=3,line=2,font=2)

k=1

while (TRUE){

  k=k+1
   
  x[k]=mean_x[k-1]+rnorm(1,0,noise)
  y[k]=mean_y[k-1]+rnorm(1,0,noise)
  
  distance[k]=sqrt((x[k]-target[j,1])^2 + (y[k]-target[j,2])^2)
  
  if(distance[k]<=distance_target[k-1]){
    
    distance_target[k]=distance[k]
    mean_x[k]=x[k]
    mean_y[k]=y[k]
    
  }else{
    
    distance_target[k]=distance_target[k-1]
    mean_x[k]=mean_x[k-1]
    mean_y[k]=mean_y[k-1]
   
  }
  
  points(x[k],y[k],pch=8)

  Sys.sleep(.1) ## retard steps 0,1 sec
  
  if(distance[k]<=1){
    
    break
    
  }
  
}
}
