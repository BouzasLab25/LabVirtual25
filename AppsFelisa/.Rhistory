lr <- read.csv("Datasaurus_data.csv")
library("R2jags")
data_jags <- list("x", "y", "n_obs", "x_pred", "n_pred")
#Datos reales
y <- lr$y
x <- lr$x
n_obs <- nrow(lr)
#Datos predichos
x_pred <- 0:100
n_pred <- length(x_pred)
write("model{
beta_0 ~ dunif(0, 100)
m ~ dunif(-10, 10)
sigma ~ dunif (0, 70)
tau <- 1 / sigma ^ 2
#Inferencia desde obs originales
for(k in 1:n_obs){
y[k] ~ dnorm(mu[k], tau)
mu[k] <- beta_0 + m * x[k]
}
#Prediccion para rangos nuevos de x
for(h in 1:n_pred){
y_pred[h] ~ dnorm(mu_pred[h], tau)
mu_pred[h] <- beta_0 + m * x_pred[h]
}
}", "lr.bug")
parameters <- c("beta_0", "m", "sigma", "mu", "y_pred", "mu_pred")
inference <- jags(data = data_jags, parameters.to.save = parameters, model.file = "lr.bug", n.chains = 3, n.iter = 5000, n.burnin = 500, n.thin = 1)
results <- inference$BUGSoutput$sims.list
beta_0 <- results$beta_0
m <- results$m
sigma <- results$sigma
tau <- results$tau
mu <- results$mu
y_pred <- results$y_pred
mu_pred <- results$mu_pred
layout(matrix(1:6, ncol = 3))
hist(m)
hist(beta_0)
plot(beta_0, m, xlim = c(20, 80), ylim = c(-1, 0.5))
hist(sigma)
plot(beta_0, sigma, xlim = c(20, 80), ylim = c(20, 40))
plot(sigma, m, xlim = c(20, 40), ylim = c(-1, 0.5))
layout(1)
plot(NULL, xlim = c(0, 100), ylim = c(0, 100))
indices <- sample(1:length(beta_0), size = 50)
for(i in indices){
abline(beta_0[i], m[i], col = "#0066ee33")
}
points(lr$x, lr$y, pch = 16)
for(j in 1:length(x_pred)){
hist(y_pred[, j], plot = F) -> hg
hist(mu_pred[, j], plot = F) -> hk
lines(x_pred[j] + hg$density * -10, hg$mids, col = "#00000044")
lines(x_pred[j] + hk$density * -10, hk$mids, col = "#ee000044")
}
mean(lr)
mean(beta_0)
lr <- read.csv("Datasaurus_data.csv")
library("R2jags")
data_jags <- list("x", "y", "n_obs", "x_pred", "n_pred")
#Datos reales
y <- lr$y
x <- lr$x
n_obs <- nrow(lr)
#Datos predichos
x_pred <- 0:100
n_pred <- length(x_pred)
write("model{
beta_0 ~ dunif(0, 100)
m ~ dunif(-10, 10)
sigma ~ dunif (-70, 70)      #RECORDAR
tau <- 1 / sigma ^ 2
#Inferencia desde obs originales
for(k in 1:n_obs){
y[k] ~ dnorm(mu[k], tau)
mu[k] <- beta_0 + m * x[k]
}
#Prediccion para rangos nuevos de x
for(h in 1:n_pred){
y_pred[h] ~ dnorm(mu_pred[h], tau)
mu_pred[h] <- beta_0 + m * x_pred[h]
}
}", "lr.bug")
parameters <- c("beta_0", "m", "sigma", "mu", "y_pred", "mu_pred")
inference <- jags(data = data_jags, parameters.to.save = parameters, model.file = "lr.bug", n.chains = 3, n.iter = 5000, n.burnin = 500, n.thin = 1)
results <- inference$BUGSoutput$sims.list
beta_0 <- results$beta_0
m <- results$m
sigma <- results$sigma
tau <- results$tau
mu <- results$mu
y_pred <- results$y_pred
mu_pred <- results$mu_pred
layout(matrix(1:6, ncol = 3))
hist(m)
hist(beta_0)
plot(beta_0, m, xlim = c(20, 80), ylim = c(-1, 0.5))
hist(sigma)
plot(beta_0, sigma, xlim = c(20, 80), ylim = c(20, 40))
plot(sigma, m, xlim = c(20, 40), ylim = c(-1, 0.5))
layout(1)
plot(NULL, xlim = c(0, 100), ylim = c(0, 100))
indices <- sample(1:length(beta_0), size = 50)
for(i in indices){
abline(beta_0[i], m[i], col = "#0066ee33")
}
points(lr$x, lr$y, pch = 16)
for(j in 1:length(x_pred)){
hist(y_pred[, j], plot = F) -> hg
hist(mu_pred[, j], plot = F) -> hk
lines(x_pred[j] + hg$density * -10, hg$mids, col = "#00000044")
lines(x_pred[j] + hk$density * -10, hk$mids, col = "#ee000044")
}
library("R2jags")
lr <- read.csv("Datasaurus_data.csv")
library("R2jags")
data_jags <- list("x", "y", "n_obs", "x_pred", "n_pred")
#Datos reales
y <- lr$y
x <- lr$x
n_obs <- nrow(lr)
#Datos predichos
x_pred <- 0:100
n_pred <- length(x_pred)
write("model{
beta_0 ~ dunif(0, 100)
m ~ dunif(-10, 10)
sigma ~ dunif (0, 70)      #RECORDAR
tau <- 1 / sigma ^ 2
#Inferencia desde obs originales
for(k in 1:n_obs){
y[k] ~ dnorm(mu[k], tau)
mu[k] <- beta_0 + m * x[k]
}
#Prediccion para rangos nuevos de x
for(h in 1:n_pred){
y_pred[h] ~ dnorm(mu_pred[h], tau)
mu_pred[h] <- beta_0 + m * x_pred[h]
}
}", "lr.bug")
parameters <- c("beta_0", "m", "sigma", "mu", "y_pred", "mu_pred")
inference <- jags(data = data_jags, parameters.to.save = parameters, model.file = "lr.bug", n.chains = 3, n.iter = 5000, n.burnin = 500, n.thin = 1)
results <- inference$BUGSoutput$sims.list
beta_0 <- results$beta_0
m <- results$m
sigma <- results$sigma
tau <- results$tau
mu <- results$mu
y_pred <- results$y_pred
mu_pred <- results$mu_pred
layout(matrix(1:6, ncol = 3))
hist(m)
hist(beta_0)
plot(beta_0, m, xlim = c(20, 80), ylim = c(-1, 0.5))
hist(sigma)
plot(beta_0, sigma, xlim = c(20, 80), ylim = c(20, 40))
plot(sigma, m, xlim = c(20, 40), ylim = c(-1, 0.5))
layout(1)
plot(NULL, xlim = c(0, 100), ylim = c(0, 100))
indices <- sample(1:length(beta_0), size = 50)
for(i in indices){
abline(beta_0[i], m[i], col = "#0066ee33")
}
points(lr$x, lr$y, pch = 16)
for(j in 1:length(x_pred)){
hist(y_pred[, j], plot = F) -> hg
hist(mu_pred[, j], plot = F) -> hk
lines(x_pred[j] + hg$density * -10, hg$mids, col = "#00000044")
lines(x_pred[j] + hk$density * -10, hk$mids, col = "#ee000044")
}
lr <- read.csv("Datasaurus_data.csv")
library("R2jags")
data_jags <- list("x", "y", "n_obs", "x_pred", "n_pred")
#Datos reales
y <- lr$y
x <- lr$x
n_obs <- nrow(lr)
#Datos predichos
x_pred <- 0:100
n_pred <- length(x_pred)
write("model{
beta_0 ~ dunif(0, 100)
m ~ dunif(-10, 10)
sigma ~ dunif (0, 100)      #RECORDAR
tau <- 1 / sigma ^ 2
#Inferencia desde obs originales
for(k in 1:n_obs){
y[k] ~ dnorm(mu[k], tau)
mu[k] <- beta_0 + m * x[k]
}
#Prediccion para rangos nuevos de x
for(h in 1:n_pred){
y_pred[h] ~ dnorm(mu_pred[h], tau)
mu_pred[h] <- beta_0 + m * x_pred[h]
}
}", "lr.bug")
parameters <- c("beta_0", "m", "sigma", "mu", "y_pred", "mu_pred")
inference <- jags(data = data_jags, parameters.to.save = parameters, model.file = "lr.bug", n.chains = 3, n.iter = 5000, n.burnin = 500, n.thin = 1)
results <- inference$BUGSoutput$sims.list
beta_0 <- results$beta_0
m <- results$m
sigma <- results$sigma
tau <- results$tau
mu <- results$mu
y_pred <- results$y_pred
mu_pred <- results$mu_pred
layout(matrix(1:6, ncol = 3))
hist(m)
hist(beta_0)
plot(beta_0, m, xlim = c(20, 80), ylim = c(-1, 0.5))
hist(sigma)
plot(beta_0, sigma, xlim = c(20, 80), ylim = c(20, 40))
plot(sigma, m, xlim = c(20, 40), ylim = c(-1, 0.5))
layout(1)
plot(NULL, xlim = c(0, 100), ylim = c(0, 100))
indices <- sample(1:length(beta_0), size = 50)
for(i in indices){
abline(beta_0[i], m[i], col = "#0066ee33")
}
points(lr$x, lr$y, pch = 16)
for(j in 1:length(x_pred)){
hist(y_pred[, j], plot = F) -> hg
hist(mu_pred[, j], plot = F) -> hk
lines(x_pred[j] + hg$density * -10, hg$mids, col = "#00000044")
lines(x_pred[j] + hk$density * -10, hk$mids, col = "#ee000044")
}
layout(matrix(1:6, ncol = 3))
hist(m)
hist(beta_0)
plot(beta_0, m, xlim = c(20, 90), ylim = c(-1, 0.5))
hist(sigma)
plot(beta_0, sigma, xlim = c(20, 90), ylim = c(20, 40))
plot(sigma, m, xlim = c(20, 40), ylim = c(-1, 0.5))
layout(1)
plot(NULL, xlim = c(0, 100), ylim = c(0, 100))
indices <- sample(1:length(beta_0), size = 50)
for(i in indices){
abline(beta_0[i], m[i], col = "#0066ee33")
}
points(lr$x, lr$y, pch = 16)
for(j in 1:length(x_pred)){
hist(y_pred[, j], plot = F) -> hg
hist(mu_pred[, j], plot = F) -> hk
lines(x_pred[j] + hg$density * -10, hg$mids, col = "#00000044")
lines(x_pred[j] + hk$density * -10, hk$mids, col = "#ee000044")
}
summary(m)
summary(beta_0)
summary(sigma)
library(shiny); runApp('PAPIME2016/AppsFelisa/SDT.R')
shinyApp(ui, server)
runApp('PAPIME2016/AppsFelisa/SDT_2.R')
runApp('PAPIME2016/AppsFelisa/SDT.R')
